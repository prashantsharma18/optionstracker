{
    "annotations": {
      "list": [
        {
          "builtIn": 1,
          "datasource": {
            "type": "grafana",
            "uid": "-- Grafana --"
          },
          "enable": true,
          "hide": true,
          "iconColor": "rgba(0, 211, 255, 1)",
          "name": "Annotations & Alerts",
          "type": "dashboard"
        }
      ]
    },
    "editable": true,
    "fiscalYearStartMonth": 0,
    "graphTooltip": 0,
    "id": 3,
    "links": [],
    "panels": [
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "line"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "#EAB839",
                  "value": -10
                },
                {
                  "color": "red",
                  "value": 10
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 12,
          "x": 0,
          "y": 0
        },
        "id": 1,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "cdwjw866vlam8f"
            },
            "query": "from(bucket: \"nifty\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\n  |> filter(fn: (r) => r[\"_field\"] == \"call_vega\" or r[\"_field\"] == \"put_vega\")\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)  // Aggregate data in 1-minute windows\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"])  // Ensure the data is sorted by time",
            "refId": "A"
          }
        ],
        "title": "Vega",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green",
                  "value": null
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 9
        },
        "id": 4,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "cdwjw866vlam8f"
            },
            "query": "  from(bucket: \"nifty\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\n  |> filter(fn: (r) => r[\"_field\"] == \"put_impliedVolatility\" or r[\"_field\"] == \"call_impliedVolatility\")\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)\n  |> yield(name: \"mean\")\n",
            "refId": "A"
          }
        ],
        "title": "Implied Volatility",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 9,
          "w": 12,
          "x": 0,
          "y": 17
        },
        "id": 2,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "cdwjw866vlam8f"
            },
            "query": "  from(bucket: \"nifty\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\n  |> filter(fn: (r) => r[\"_field\"] == \"call_theta\" or r[\"_field\"] == \"put_theta\")\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n  |> sort(columns: [\"_time\"])  // Ensure the data is sorted by time\n",
            "refId": "A"
          }
        ],
        "title": "Theta",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "normal"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "fieldMinMax": false,
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 26
        },
        "id": 3,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "cdwjw866vlam8f"
            },
            "query": "from(bucket: \"nifty\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\n  |> filter(fn: (r) => r[\"_field\"] == \"call_callDelta\" or r[\"_field\"] == \"put_putDelta\")\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)\n",
            "refId": "A"
          }
        ],
        "title": "Delta",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "palette-classic"
            },
            "custom": {
              "axisBorderShow": false,
              "axisCenteredZero": false,
              "axisColorMode": "text",
              "axisLabel": "",
              "axisPlacement": "auto",
              "barAlignment": 0,
              "barWidthFactor": 0.6,
              "drawStyle": "line",
              "fillOpacity": 0,
              "gradientMode": "none",
              "hideFrom": {
                "legend": false,
                "tooltip": false,
                "viz": false
              },
              "insertNulls": false,
              "lineInterpolation": "linear",
              "lineWidth": 1,
              "pointSize": 5,
              "scaleDistribution": {
                "type": "linear"
              },
              "showPoints": "auto",
              "spanNulls": false,
              "stacking": {
                "group": "A",
                "mode": "none"
              },
              "thresholdsStyle": {
                "mode": "off"
              }
            },
            "mappings": [],
            "thresholds": {
              "mode": "absolute",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "red",
                  "value": 80
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 10,
          "w": 12,
          "x": 0,
          "y": 34
        },
        "id": 5,
        "options": {
          "legend": {
            "calcs": [],
            "displayMode": "list",
            "placement": "bottom",
            "showLegend": true
          },
          "tooltip": {
            "mode": "single",
            "sort": "none"
          }
        },
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adwxuv2rlbugwe"
            },
            "query": "from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_gamma\" or r[\"_field\"] == \"call_gamma\")\r\n  |> aggregateWindow(every: 5s, fn: mean, createEmpty: false)",
            "refId": "A"
          }
        ],
        "title": "gamma",
        "type": "timeseries"
      },
      {
        "datasource": {
          "default": true,
          "type": "influxdb",
          "uid": "adwxuv2rlbugwe"
        },
        "fieldConfig": {
          "defaults": {
            "color": {
              "mode": "thresholds"
            },
            "custom": {
              "align": "auto",
              "cellOptions": {
                "type": "auto"
              },
              "inspect": false
            },
            "mappings": [],
            "thresholds": {
              "mode": "percentage",
              "steps": [
                {
                  "color": "green"
                },
                {
                  "color": "orange",
                  "value": 70
                },
                {
                  "color": "red",
                  "value": 85
                }
              ]
            }
          },
          "overrides": []
        },
        "gridPos": {
          "h": 8,
          "w": 12,
          "x": 0,
          "y": 44
        },
        "id": 11,
        "options": {
          "cellHeight": "sm",
          "footer": {
            "countRows": false,
            "fields": "",
            "reducer": [
              "sum"
            ],
            "show": false
          },
          "showHeader": true,
          "sortBy": []
        },
        "pluginVersion": "11.2.0",
        "targets": [
          {
            "datasource": {
              "type": "influxdb",
              "uid": "adwxuv2rlbugwe"
            },
            "query": "import \"contrib/anaisdg/statsmodels\"\r\nimport \"math\"\r\n\r\n// Function to convert slope to degrees\r\nconvertSlopeToAngle = (slope) => math.atan(x: slope) * 180.0 / math.pi\r\n\r\n// Query for call vega angle\r\ncall_vega_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"call_vega\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Vega Call\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n// Query for put vega angle\r\nput_vega_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_vega\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Vega Put\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  // Query for put vega angle\r\ncall_iv_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"call_impliedVolatility\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"IV Call\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  put_iv_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_impliedVolatility\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"IV Put\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  call_delta_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"call_callDelta\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Delta Call\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  put_delta_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_putDelta\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Delta Put\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  call_theta_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"call_theta\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Theta Call\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  put_theta_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_theta\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Theta Put\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  call_gamma_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"call_gamma\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Gamma Call\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n  put_gamma_angle = from(bucket: \"nifty\")\r\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\r\n  |> filter(fn: (r) => r[\"_measurement\"] == \"greeks_differences\")\r\n  |> filter(fn: (r) => r[\"_field\"] == \"put_gamma\")\r\n  |> statsmodels.linearRegression()\r\n  |> map(fn: (r) => ({\r\n      title: \"Gamma Put\",\r\n      _value: convertSlopeToAngle(slope: r.slope),\r\n      _time: r._time\r\n  }))\r\n  |> last()  // Get the most recent slope value\r\n\r\n// Combine both queries into a single table\r\ncombined_angles = union(tables: [call_vega_angle, put_vega_angle, call_iv_angle, put_iv_angle, call_delta_angle, put_delta_angle, call_theta_angle, put_theta_angle, call_gamma_angle, put_gamma_angle])\r\n  |> yield(name: \"combined_vega_angles\")\r\n",
            "refId": "A"
          }
        ],
        "title": "Angles",
        "transformations": [
          {
            "id": "organize",
            "options": {
              "excludeByName": {},
              "includeByName": {},
              "indexByName": {
                "_time": 2,
                "_value": 1,
                "title": 0
              },
              "renameByName": {
                "_value": "Angle",
                "title": "Greek"
              }
            }
          },
          {
            "id": "sortBy",
            "options": {
              "fields": {},
              "sort": [
                {
                  "desc": true,
                  "field": "Greek"
                }
              ]
            }
          }
        ],
        "type": "table"
      }
    ],
    "refresh": "",
    "schemaVersion": 39,
    "tags": [],
    "templating": {
      "list": []
    },
    "time": {
      "from": "2024-08-30T03:46:18.000Z",
      "to": "2024-08-30T07:14:12.000Z"
    },
    "timepicker": {},
    "timezone": "browser",
    "title": "option-greeks Copy",
    "uid": "cdxkkrlyesetcf",
    "version": 6,
    "weekStart": ""
  }